---
title: "Joining the dots for modern data science workflows"
subtitle: "State of the art workflows not just for Computer Scientists"
author: "Nick Young, Jens Brinkmann"
institute: "The University of Auckland"
date: 2024-07-08
date-format: "MMMM, YYYY"
# bibliography: refs.bib
from: markdown+emoji
# embed-resources: false
format:
  revealjs:
    # tbl-cap-location: bottom
    # number-sections: true
    theme: ResBazTheme.scss
    highlight-style: atom-one
    code-overflow: wrap
    # highlight-style: monokai
    # css: ./logo.css
    # disableLayout: true
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    transition: convex
    width: 1600
    height: 900
    margin: 0.2
    # logo: "./UoALogoDarkBlueRGBLandscape.png"
    title-slide-attributes:
        data-background-image: UoALogoDarkBlueRGBLandscape.png
        data-background-size: 20%
        # data-background-postion: right
        data-background-position: 95% 76%
        # data-background-position: bottom 10px right 20px
    # background-image: ./ResBaz_transparent_Logo_cropped.svg
    # background-opacity: 0.5
    # background-position: bottom 10px right 20px
    # background-size: contain
    # data-background-repeat: no-repeat
    # background-size: 80px
    # background-repeat: no-repeat
    # background-position: 0% 100%
    # logo: ResBaz_transparent_cropped.svg
    # self_contained: false
    reveal_plugins: ["menu"]
    reveal_options:
      menu:
        numbers: true
    header: State of the Art Workflows for working with data in 2024
    header-logo: UoALogoDarkBlueRGBLandscape.png
    hide-from-titleSlide: all
    filters:
      - reveal-header
      - line-highlight
    mermaid:
      theme: dark
      fig-responsive: false  
# include-in-header: 
#   text: |
#     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

editor:
  render-on-save: true
  # execute:
  #   echo: false

revealjs-plugins:
  - attribution

--- 


# Welcome to the session 

This session in 3 sentences:

<!-- ADD FRAGMENTS -->

1. It is about modern data science workflows and shall be accessible to non-computer scientists
2. We will demonstrate a chain of tools that are state-of-the-art in 2024 within the 1 hour we have
3. No prerequisites, but you have to pay close attention (to get the most *bang for the buck* :money_with_wings: ) and we will provide you with a roadmap and code-example you can use to follow-up on the details later 


# Housekeeping ðŸ§¹
<!-- TODO copy from Python4h -->

# Expectations
- This is **not** a hands-on session, but I will try to show you as much as possible in the hour we have
- I will share the slides and code with you afterwards
- Though we use a geospatial dataset, that is just one example I picked
  - the focus shall be on the tools and workflows we use; these can be applied to a multitude of other tasks

<!-- ADD MINDMAP -->
what you shouldn't expect

- understanding of all the details (the code, the dataset, every option of the tools)
- installing all the software on your machine within this hour
- a comprehensive overview of all the tools and workflows available; we focus on a selection that we consider *a good bang for the buck*

what you should expect

- one end-to-end overview of the selected tools and workflows
- being able to follow along on an abstract level 
  - for example: In the sense of: "I see how they use GitHub and roughly get what the roadmap is, but I don't understand every detail and expect that I will have to look up some/many things later on"

What is about to happen **after** this session?

- you are encouraged to give it a go yourself
- ask questions in the [ResBaz Drop-In Clinic (HackyHour)](https://resbaz.auckland.ac.nz/schedule/#session-090) session (tomorrow, same time slot), the weekly [Hacky Hour](https://uoa-eresearch.github.io/HackyHour/) or Slack channel 
  <!-- TODO: clarify if Slack is available to all and our preferred means of interaction  -->
- check out the linked resources
- Try the tools and workflows for youself
  - either based on your current/near-future research question(s)
  - or if that is too demanding/too abstract/not fun enough, for a fun project you have in mind. Create your own Jump and Run game, catalogue your collection of something, make a fancy bucket list 
- (within limitations; details below): Try to get some AI support 

# Session descritpion

Operating Systems ({{< fa brands apple >}}, {{< fa brands windows >}}, {{< fa brands linux >}}) are deemed out of scope for this session
- the demonstrated tools are available for all three major operating systems

| We selected...| because ...                                                                                    |
|---------------|-------------------------------------------------------------------------------------------|
| {{< fa brands python >}} [Python](https://python.org/)        | ... it is **awesome** (abstract, relatively easy to learn, has a great community, tons of libraries) |
| ![](/Data2024Assets/jupyter.svg){ height="1em" loading=lazy} [Jupyter](https://jupyter.org/)      | ... it gives us interactivity; we can super quickly try something out |
| ![](/Data2024Assets/visual-studio-code.svg){ height="1em" loading=lazy} [VSC](https://code.visualstudio.com/)           | ... it has a substantial **user-base**, is **free** and **expandable**, and is a great tool for working with Python |
| {{< fa brands git >}} /[GitHub](https://github.com/) {{< fa brands github >}}        | ... it makes our lives easier in many different ways: by enabling collaboration, project management, or even just as a logbook and backup |
| ![](/Data2024Assets/geopandas_iconBW.png){ height="1em" loading=lazy}&nbsp;[Geopandas](https://geopandas.org/en/stable/) <br> ![](/Data2024Assets/folium_logoBW2.png){ height="1em" loading=lazy} [Folium](https://python-visualization.github.io/folium/latest/) | ... these are good examples how Python libraries abstract cumbersome tasks/make working with geospatial data easy |

<!-- TODO decide if GHA is still relevant?   - GHA ([GitHubActions](https://github.com/features/actions)) {{< fa circle-play >}} -->

What we touch upon but can't fully resolve, especially in the research-context, is:
- AI support (GitHub CoPilot, Microsoft CoPilot, ...)
- Licensing (MIT, Apache, GPL, Creative Commons, ...)
- sharing/ip 
As of designing this course in July 2024, for the University of Auckland, there is some guidance
- gen ai
- ATO for MS CoPilot
- data sensitivity classification
Overall: When in doubt, talk to relevant people

<!-- TODO: #25 Decide what level of detail of the following is needed, depends on the test-run to get timing, too -->
# Why Python?
:::: {.columns}
::: {.column width=70%}

- Python is 
  - a high-level/abstract and general-purpose programming language
  - an interpreted language (not compiled)
- Python is dynamically typed (no need to declare variables)
- Python is easy to 
  -  *read, maintain, write, debug, extend, integrate with other languages, deploy, scale, share, collaborate, teach*
:::

::: {.column width=40%}
  ![](Data2024Assets/CvsPythonMeme.JPG)
:::
::::

## Programming Language: Python - continued
::: {.callout-tip}
## Personal opinion

- a common statement is that Python is slow
  - in reality, you can run (encapsulated) other languages
- being a **relatively abstract languge** makes it suitable for many research projects (no need to reinvent the wheel)
- The **community** is great! 
  - **most popular**/[most searched](https://www.statista.com/chart/16567/popular-programming-languages/) for on Google 
  - there are tons of **great libraries** that can be used 
  - because Python is so popular, **ChatGPT and other Machine Learning (ML) powered support tools** can write pretty decent code (date of writing this = April 2024).
- some report issues with **libraries** and changes to them
    - there are many ways of dependency management (`requirements.txt` or [Poetry](https://python-poetry.org/)) version-controlling your code and making sure it is reproducible
:::


## Start with VSC on Windows/Linux/Mac

- the idea here is that we all start at the same point
- that is **after** (!) you have successfully installed Python on the (local/remote) machine you are using
- we will not show you how to install Python on Windows, MacOS, and Linux
- as anticipated in the very beginning, this variance of operating systems makes it impossible to cover every aspect hands-on

As a rough guideline
- Windows: Anaconda, Chocolatey, WSL2
(WSL2, Homebrew?/Linux?)


## How does the VSC interface work

- these are IDE - VSC (TLA)

::: {.columns}
::: {.column width=50%}
An IDE is an Integrated Development Environment.
(a TLA is a Three Letter Acronym)
You can do everything we will talk today in a simple text editor, using your operating system's file explorer, a command-line terminal, but an IDE makes your life easier. 
- [Visual Studio Code (VSC)](https://code.visualstudio.com/)
![](/Data2024Assets/visual-studio-code.svg){ height="1em" loading=lazy} 
  - VSCodium ![](/Data2024Assets/VSCodium.png){ height="1em" loading=lazy} 
    - (open-source version that isn't collection telemetry data)
- PyCharm  ![](/Data2024Assets/PyCharm_Icon%20(1).svg){ height="1em" loading=lazy} and others specialised for certain programming languages
:::

::: {.column width=50%}

![](/Data2024Assets/VSCOverview.png){ height="100%" loading=lazy}
[more information on the official website]([link](https://code.visualstudio.com/docs/getstarted/userinterface))
:::
::::

::: {.attribution}
Photo courtesy of [Visual Studio Code](https://code.visualstudio.com/docs/getstarted/userinterface)
:::

## How to navigate in VSC

- if you are familiar with the layout, it is easy
- if you are a novice, it might overwhelm you
  - I have been there and I got lost
- think of it as a 
  - file explorer (usually on the left)
  - terminal (usually at the bottom)
  - one or many editors (usually in the middle)
    - at times they have preview windows, too
- there are many plugins; we will use:
  -  GitHub
     - GitHub CoPilot 
  - Python
    - we will create a virutal environment
  - we will show you (only show you) how to connect to a remote server (that might be another physical machine/like your computer at home or a cloud service, like the research infrastructure at the University of Auckland (UoA), [Nectar](https://research-hub.auckland.ac.nz/research-software-and-computing/advanced-compute/nectar-research-cloud) of [AWS](https://aws.amazon.com/))

# How to connect to a remote resource using VSC (that can be your LabPC, ResVM, Nectar, AWS,...)
(go to SESSION UoA compute)

# Reproducibility

- this is a big topic in academia
- to superficially summarise: Instead of writing a publication and keeping your code and data to yourself, you want to enable others to reproduce your results
- while this has various other implications (Ethics, Intellectual Property, ...), for now, we assume that this is all sorted
- some journals, etc. require you to provide your code and data (data availability statement, etc.)

Let's focus on the technical aspects with this example:

- let's say you have input data that you store and properly enhance with metadata
  - **Dataset**. 
      - Where did you get it from? `Source URL?`
      - What version/date did you download it? `Version 17.2.1, 2024-JUL-08`
      - Is it acceptable that you copy and share it `CC-BY-SA` + Link
  - **Code**
    - you followed the Tidy Data principles: such as: 
      - keep an untouched copy of your raw data
      - keep a clear receipe of the steps you took (hard for spreadsheets, easy for code)
      - you can use Git to version-control your code; it might be adequate for data, too; it might not
  - **Infrastructure**
    - you don't start from scratch every time
    - you base your work on others'
    - that is fine and encouraged; we don't want to code our *Microsoft Word*, in order to write a paper
    - (among others/this is a non-exhausitve list), three aspects follow TODO: PUT A PYRAMID VISUALISATION HERE
      - the machine the code runs on (that might have an influence on how random numbers are generated; how many bits a certain data type has, etc.). For some research that might not be relevant, for others it is crucial
      - the Python version (for example, Python 2 vs Python 3 had breaking changes)
      - the libraries you use (their syntax changes, they might not exist anymore)
      - if you use indeterministic models (some ML approaches), the random seed might be important or it might not be 100% reproducitble; that's often fine if you minimise the potential
    - While achieving **full reproducibility** is a challange (you'd have to keep/maintain/trouble-shoot a physical machine with the same CPU running everything; you wouldn't be able to patch its security vulnerabilities, etc.), there are certain steps you can take are *in the right direction*
    - TODO PUT THE INVERSE PYRAMID HERE
      - keep track of your libraries and their versions 
        - you can use a `requirements.txt` file
        - you can use [Poetry](https://python-poetry.org/)
        - you can use [Conda](https://docs.conda.io/en/latest/)
        - potential challenge: These libraries are taken offline; you just point to the relevant version; you don't keep/download/save/backup the relevant version
      - you can Containerise your environment; or parts of it
        - you can use [Docker](https://www.docker.com/) LINK TO OTHER SESSION
          - in essence: You define the operating system (`Ubuntu version 22.04`)
          - You define the exact Python version (`Python 3.10.2`)
          - You use the above methods to extract libraries and their versions (`pip freeze > requirements.txt`)
      - you run it on a certain cloud infrastructure; this might go away/change

- RO Crate

# How and why to use Git 

![alt](Data2024Assets/folium_logo.png)


::: {.callout-note icon=false}
## {{< fa quote-right >}} test

Some text.

:::

:::{.callout-note}

## This is my test note

And some content inside of it

:::

:::{.solutionbox}

::::{.solutionbox-header}
:::::{.solutionbox-icon}
:::::
This is my test solution
::::

::::{.solutionbox-body}
And some content inside of it
::::

:::


<!-- :::{.solutionbox}

::::{.solutionbox-header}
<!-- Relevant ResBaz Sessions
::::

::::{.solutionbox-body}
consider attending [ResBaz Git-Session](https://resbaz.auckland.ac.nz/schedule/#session-125) 
::::

::: -->




Some initial clarification on *Git* vs *GitHub* and *GitHub Actions*
- | {{< fa brands git >}} is a version control system
  - consider it a record of changes in your code
    - how powerful that is might not be obvious
    - details to be found in the book [Gitting Things Done](https://www.freecodecamp.org/news/gitting-things-done-book), for example
  - we recommend using Git in our [RDM Workshops](https://research-hub.auckland.ac.nz/guide-to-managing-research-data/rd-support-and-training/managing-research-data-workshops)
- | {{< fa brands git >}} /[GitHub](https://github.com/) {{< fa brands github >}}   is a platform that hosts Git repositories
  - Oversimplified: This is how you interact with Git (there are alternatives/[GitLab](https://about.gitlab.com/), [BitBucket](https://bitbucket.org), ...)
  - it is also 
    - a social network for developers
    - a place where you can find code, share code, collaborate on code, and get feedback on code
- You can have public repositories (fancy way of saying *project folders*) in the general free plan, at UoA (and potentially other academic institutions) you can have free private repositories, too
<!-- TODO #10 -->
- GitHub Action (GHA)
  - this is a way to automate things 
  - think of it as a computer (more a Virtual Machine) that is running in the cloud and does things for you
  - as such, in theory, you can do *everything* you can do on your *proper computer*, by using GitHub's infrastructure on your smartphone to write code that is then executed on a server in the cloud



# How to use Python; a 30k feet overview pointing at some neat aspects

::: {.callout-tip}
## Relevant ResBaz Sessions
- Victor Python 
- 4h Python
- UoA only: Python Researcher Development
:::

- let us start with a simple example
```python
print("Hello World")
```
- we can do math with variables
```python
a = 2 + 2
print(a)
```
- it is coding, so we have to pay attention to detail
```python
a = 2 + 2
print(A)
```
- we can and will use libraries
- we can and will import data
- plot
- export data


## How to leverage AI (GitHub CoPilot,...)
::: {.callout-tip}
## Relevant ResBaz Sessions
- AI in research 
:::
This relevance of this is highly depending on your circumstances.
Your institution and its stance on AI usage.
Your personal stance on AI usage.
The field you are working in and especially the sensitivity of the data you are working with.

There are currently two main workflows:
- auto-completion
- write what you want to achieve as a comment and let the AI write the code for you

::: {.callout-warning}
While this is great, it is not a silver bullet.
You need some basic knowledge to understand what is presented to you. To debug it. To adapt it to your needs.
Still, we will demonstrate it here
:::

::: {.columns}
::: {.column width=50%}
- GitHub CoPilot is a tool that can write code for you 
  - the worflow is that you write a comment and CoPilot suggests code
- ChatGPT/Bing/...
  - you can ask questions and get code snippets
As of now (July 2024), for simple tasks try CoPilot, for more complex tasks try ChatGPT, etc.
- While creating this very presentation, I used CoPilot and it suggested most of the text on the right-hand side
- As you can quickly tell, it is fascinating what it does, but it far from perfect
:::
::: {.column width=50%}
Here comes the auto-completed list:
- it is based on OpenAI's GPT-3
- it is a great tool to learn from
- it is a great tool to get started with
- it is a great tool to get unstuck
- it is a great tool to get a second opinion
- it is a great tool to get a first opinion
- it is a great tool to get a third opinion
- it is a great tool to get a fourth opinion
- it is a great tool to get a fifth opinion
- it is a great tool to get a sixth opinion
- it is a great tool to get a seventh opinion
- it is a great tool to get an eighth opinion
- it is a great tool to get a ninth opinion
- it is a great tool to get a tenth opinion
- it is a great tool to get an eleventh opinion
:::
::::

# How to use Jupyter Notebooks

- Jupyter Notebooks (file extension `.ipynb`) are a great way to interact with Python
  - some history to be found [here](https://www.dataschool.io/jupyter-and-ipython-terminology/)
  - "In 2011, the IPython Notebook was released. It was known as a "computational notebook" because it allowed you to weave together code, plots, and narrative text into a single document"
  - "Also in 2015, IPython split into two projects: IPython (for Python-specific components) and Jupyter (for language-agnostic components). As part of that split, the IPython Notebook was renamed the Jupyter Notebook. The name "Jupyter" was inspired by the open languages of science: Julia, Python, and R"


- As opposed to other langugages, where you mostly write a script, wait for it to compile or fail and run it, Jupyter Notebooks allow you to write code in cells and run them individually
- This is also no silver bullet, but it is a great for initial development stages
  - later, you might want to chain together a multitude of scripts `.py` files
- Jupyter Notebook are great for teaching, learning, sharing

### Briefly: Jupyter on ...
::: {.callout-tip}
## Relevant ResBaz Sessions
- Overview of compute options
- Nectar
- AWS and co
- Docker
:::

One neat aspect of Jupyter Notebooks (that might not be obvious to the untrained eye) is that they are **not** bound to your local machine and you can interact with them through your browser.
*Under the hood* can be executed on 
- your local machine
- a Virtual Machine (VM) in the cloud
  - such as the [Nectar Research Cloud](https://ardc.edu.au/services/ardc-nectar-research-cloud/) for those who are eligible
  - such as AWS, Azure, Google Cloud, ...
- [Google Colab](https://colab.research.google.com/)
- last but not least on NZ-wide HPC infrastructure [NeSI](https://www.nesi.org.nz/), especially [Jupyter on NeSI](https://docs.nesi.org.nz/Scientific_Computing/Interactive_computing_using_Jupyter/Jupyter_on_NeSI/)



# Core session: GET THE REAL LEAFLET EXAMPLE DONE

::: {.callout-note}
While this is the core example of this session, most of the workflows/the chain of tools we use can be applied to a multitude of other tasks
:::

<!-- TODO: @Nick Add Conent, please -->
<!-- TODO: #24 consider embedding some of the code as an ipynb embed -->



::: {.columns}
::: {.column width=50%}
Starting point is [this](https://github.com/UoA-eResearch/SA2_2022_population/blob/main/making%20a%20map.ipynb)
:::
::: {.column width=50%}

- ![alt](Data2024Assets/MapFinalResult.jpg)
:::
::::

Will be a live-demo using VSC in the session.



## Outlook: Bundle this up as a Docker container

::: {.callout-tip}
## Relevant ResBaz Sessions
- Containers/Luis
:::


## Outlook 2: Have it build/compile as GitHub Action (why do you use those, etc)
<!-- TODO: #22 #21  MAYBE Have our map update via something in the browser and GHA reruns it. -->



## Outlook 3: Publish your code, results: Figshare; have a data availbaility statement in your LaTeX,... 

::: {.callout-tip}
## Relevant ResBaz Sessions
- LaTeX
- Figshare
- Overleaf
- Data Management Plan
- Data Availability Statement
- Reproducibility
- BinderHub
:::
<!-- TODO: link to Overleaf, to LaTeX session, Figshare -->

## Reproducibility
- for more reproducibility, we could run another session or include here
- Docker but then the cpu architecture would have an impact
- BinderHub is 
  - UoA only 
  - what happens if I *set all in stone today* and then return a couple of years later refresh of the underlying infrastructure and potentially get different results?











## Geopandas and Folium

- Geopandas is a library that allows you to work with geospatial data
- Folium is a library that allows you to create interactive maps




```python
# Read the HTML content from the iframe source``
# iframe_url = "https://carbon.now.sh/?bg=rgba%28255%2C255%2C255%2C1%29&t=panda-syntax&wt=none&l=python&width=680&ds=false&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=0px&ph=0px&ln=false&fl=1&fm=Hack&fs=13px&lh=133%25&si=false&es=2x&wm=false"
iframe_url = "https://carbon.now.sh/?bg=rgba%28255%2C255%2C255%2C1%29&t=panda-syntax&wt=none&l=python&width=680&ds=false&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=0px&ph=0px&ln=false&fl=1&fm=Hack&fs=13px&lh=133%25&si=false&es=2x&wm=false" # <1>
response = requests.get(iframe_url) # <2>
# print(response)
iframe_html = response.content
# print(iframe_html)
# Parse the iframe content using Beautiful Soup# <3>
# print(soup)
extracted_content = soup.body.prettify()  # Customize this based on your needs
print(extracted_content)
# save this as a html file
with open('carbon.html', 'w') as file:
    file.write(extracted_content)
```

1. help here
2. there you go
3. something elese



# Homework :briefcase: 
- Install software
<!-- TODO #7 put 3 tabs win,osx,linux -->
- Get a dataset (git pull/GitHub Desktop)
- run this one line, to see what if it works. 

## Useful links (General)
- [how to create GitHub Issues right in VSC](https://code.visualstudio.com/blogs/2020/05/06/github-issues-integration) 
  - you can use that to keep track of your to-do list without having to leave VSC!
- [what do software verison numbers refer to](https://www.freecodecamp.org/news/understanding-open-source-software-lifecycles/)

## Useful links (Python {{< fa brands python >}} specific) 

- [Python.org](https://www.python.org/)
- [Jupyter](https://jupyter.org/)

Environments

- [Anaconda](https://www.anaconda.com/)

Editors (apart from VSC)

- [PyCharm](https://www.jetbrains.com/pycharm/)

Package Management
- [PyPI](https://pypi.org/)
- [Poetry](https://python-poetry.org/)

Libraries
- [Pandas](https://pandas.pydata.org/)
- [Matplotlib](https://matplotlib.org/)

Machine Learning
- [TensorFlow](https://www.tensorflow.org/)
- [PyTorch](https://pytorch.org/)
- [Keras](https://keras.io/)
- [Seaborn](https://seaborn.pydata.org/)
- [Scikit-learn](https://scikit-learn.org/stable/)

Web Development
- [Django](https://www.djangoproject.com/)
- [Flask](https://flask.palletsprojects.com/en/2.0.x/)
- [FastAPI](https://fastapi.tiangolo.com/)
- [Streamlit](https://streamlit.io/)
- [Dash](https://dash.plotly.com/)

Visualisation
- [Plotly](https://plotly.com/)
- [Bokeh](https://docs.bokeh.org/en/latest/index.html)
- [Altair](https://altair-viz.github.io/)
- [Holoviews](http://holoviews.org/)
- [Panel](https://panel.holoviz.org/)

Geospatial
- [GeoPandas](https://geopandas.org/en/stable/)
- [Folium](https://python-visualization.github.io/folium/latest/)
- [Leaflet](https://leafletjs.com/)
- [Cartopy](https://scitools.org.uk/cartopy/docs/latest/)
- [Basemap](https://matplotlib.org/basemap/)
- [Shapely](https://shapely.readthedocs.io/en/stable/)
- [GeoPy](https://geopy.readthedocs.io/en/stable/)
- [GeoDjango](https://docs.djangoproject.com/en/3.2/ref/contrib/gis/)
- [GeoAlchemy](https://geoalchemy-2.readthedocs.io/en/latest/)
- [Fiona](https://fiona.readthedocs.io/en/latest/)
- [Pyproj](https://pyproj4.github.io/pyproj/stable/)
- [GDAL](https://gdal.org/)
- [OpenLayers](https://openlayers.org/)

  

## Useful links (Operating Systems specific) 
- Windows {{< fa brands windows >}}
  - Anaconda and other installers that put a Windows-flavoured Python install 
  <!-- -TODO #18  *Plain Vanilla* Python via this and that -->
  - [Chocolatey](https://chocolatey.org/)
  - Our recommendation: Windows Subsystem for Linux [WSL](https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux) 
    - usually WSL2 to be installed via the Software Center
  <!-- - TODO #17 here link to general installation guide -->
- MacOS {{< fa brands apple >}}
  <!-- TODO #20 #19 CONFIRM THIS - comes with own Python version (might require Dev Tools/XCdoe to be installed)? -->
  - install [Python via HomeBrew](https://docs.brew.sh/Homebrew-and-Python)
- Linux {{< fa brands linux >}}
  - many distributions come with Python pre-installed, otherwise use the package manager of your choice







For GIT OVERVIEW use GitKraken.png to get the neat subway map visualisation
Also add to Git:
I think mention the different rights and responsibilities associated with artwork, documents and code - use the program/artwork/program, read and change the master/code behind the program/artwork, sharing the result, attribution
Creative Commons has different variants, some more permissive than others.
A "permissive" license like MIT and Apache allows your code to be used, adapted and shared by anyone for their own purpose including for commercialisation, and all they need to do is attribute you. A "copyleft" license (a play on the word copyright)  like GPL or CC BY-SA for artwork, gives the same rights, but requires people who adapt and share your code to make their code available using the same license. This can help ensure a thriving, open software community. On the other hand, a permissive license can be easier for people to use

good summary on GitHub about Licenses: https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository#disclaimer

![alt](Data2024Assets/ExampleGitHubMITLicense.jpg)

<!-- Git Fail
![alt]("Data2024Assets/GoogleGitHubAccident.png") -->

<!-- TODO #23 should I get a temp VM for this to start absolutely clean slate/should I try 2 (win and linux?) -->
